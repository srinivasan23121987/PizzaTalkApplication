<?xml version="1.0" encoding="UTF-8"?>
<!-- This file automagically generated by convert_gsl version 2.4.0
 -->
<grammar version="1.0"
xml:lang="en-US"
mode="voice"
xmlns="http://www.w3.org/2001/06/grammar"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://www.w3.org/2001/06/grammar
http://www.w3.org/TR/speech-grammar/grammar.xsd"
root="Pizza_Toppings"
tag-format="semantics/1.0">

<tag> function assignSlots(out, rules) {
        for (var nu_RULENAME in rules) {
          var nu_SLOTS = rules[nu_RULENAME].nu_SLOTS;
          for (var nu_PROPERTY in nu_SLOTS) { 
            out.nu_SLOTS[nu_PROPERTY] = nu_SLOTS[nu_PROPERTY];
          }
        }
      }
</tag>


<!--

;GSL2.0
-->

<rule id="Digit" scope="private">
<tag> var nu_LATEST_RETURN;</tag>
<one-of>
<item>
  zero
<tag>out.nu_RETURN = &quot;0&quot;;
</tag>
</item>
<item>
  oh
<tag>out.nu_RETURN = &quot;0&quot;;
</tag>
</item>
<item>
  one
<tag>out.nu_RETURN = &quot;1&quot;;
</tag>
</item>
<item>
  two
<tag>out.nu_RETURN = &quot;2&quot;;
</tag>
</item>
<item>
  three
<tag>out.nu_RETURN = &quot;3&quot;;
</tag>
</item>
<item>
  four
<tag>out.nu_RETURN = &quot;4&quot;;
</tag>
</item>
<item>
  five
<tag>out.nu_RETURN = &quot;5&quot;;
</tag>
</item>
<item>
  six
<tag>out.nu_RETURN = &quot;6&quot;;
</tag>
</item>
<item>
  seven
<tag>out.nu_RETURN = &quot;7&quot;;
</tag>
</item>
<item>
  eight
<tag>out.nu_RETURN = &quot;8&quot;;
</tag>
</item>
<item>
  nine
<tag>out.nu_RETURN = &quot;9&quot;;
</tag>
</item>
</one-of>
</rule>

<rule id="Digits" scope="private">
<tag> out.nu_SLOTS = {}; var nu_LATEST_RETURN;</tag>
<tag> var d; var d1; var d2; var d3; var d4; var d5; </tag>
<one-of>
<item>
  <ruleref uri="#Digit"/>
      <tag> out.nu_RETURN = rules.Digit.nu_RETURN </tag>
</item>
<item>
  <ruleref uri="#Digit"/>
    <tag>
  d1 = rules.Digit.nu_RETURN;
  </tag>
  <ruleref uri="#Digit"/>
    <tag>
  d2 = rules.Digit.nu_RETURN;
  </tag>
</item>
<item>
  <ruleref uri="#Digit"/>
    <tag>
  d1 = rules.Digit.nu_RETURN;
  </tag>
  <ruleref uri="#Digit"/>
    <tag>
  d2 = rules.Digit.nu_RETURN;
  </tag>
  <ruleref uri="#Digit"/>
    <tag>
  d3 = rules.Digit.nu_RETURN;
  </tag>
</item>
<item>
  <ruleref uri="#Digit"/>
    <tag>
  d1 = rules.Digit.nu_RETURN;
  </tag>
  <ruleref uri="#Digit"/>
    <tag>
  d2 = rules.Digit.nu_RETURN;
  </tag>
  <ruleref uri="#Digit"/>
    <tag>
  d3 = rules.Digit.nu_RETURN;
  </tag>
  <ruleref uri="#Digit"/>
    <tag>
  d4 = rules.Digit.nu_RETURN;
  </tag>
</item>
<item>
  <ruleref uri="#Digit"/>
    <tag>
  d1 = rules.Digit.nu_RETURN;
  </tag>
  <ruleref uri="#Digit"/>
    <tag>
  d2 = rules.Digit.nu_RETURN;
  </tag>
  <ruleref uri="#Digit"/>
    <tag>
  d3 = rules.Digit.nu_RETURN;
  </tag>
  <ruleref uri="#Digit"/>
    <tag>
  d4 = rules.Digit.nu_RETURN;
  </tag>
  <ruleref uri="#Digit"/>
    <tag>
  d5 = rules.Digit.nu_RETURN;
  </tag>
</item>
</one-of>
<tag> assignSlots(out, rules) </tag>
</rule>

<rule id="Apartment_Number" scope="private">
<tag> out.nu_SLOTS = {}; var nu_LATEST_RETURN;</tag>
<tag> var d; </tag>
<ruleref uri="#Digits"/>
<tag> out.nu_SLOTS.apartmentnum = rules.Digits.nu_RETURN; </tag>
<tag> assignSlots(out, rules) </tag>
</rule>

<rule id="Street_Number" scope="private">
<tag> out.nu_SLOTS = {}; var nu_LATEST_RETURN;</tag>
<tag> var d; </tag>
<ruleref uri="#Digits"/>
<tag> out.nu_SLOTS.streetnum = rules.Digits.nu_RETURN; </tag>
<tag> assignSlots(out, rules) </tag>
</rule>

<rule id="Street_Name" scope="private">
<tag> out.nu_SLOTS = {}; var nu_LATEST_RETURN;</tag>
<tag> var s; </tag>
<item repeat="0-1">
  i
  live
  on
</item>
<ruleref uri="#Street"/>
<tag>
s = rules.Street.nu_RETURN;
</tag>
<item repeat="0-1">
  street
<tag>out.nu_SLOTS.streetname = s;
</tag>
</item>
<tag> assignSlots(out, rules) </tag>
</rule>

<rule id="Street" scope="private">
<tag> var nu_LATEST_RETURN;</tag>
<one-of>
<item>
  midway
  street
</item>
<item>
  powell
  street
</item>
<item>
  point
  street
</item>
<item>
  bay
  street
</item>
<item>
  mason
  street
</item>
<item>
  stockton
  street
</item>
<item>
  belfair
  place
</item>
<item>
  kearny
  street
</item>
<item>
  edith
  street
</item>
<item>
  maple
  street
</item>
<item>
  oak
  lane
</item>
<item>
  guardino
  drive
</item>
</one-of>
</rule>

<rule id="Pizza_Toppings" scope="public">
<tag> out.nu_SLOTS = {}; var nu_LATEST_RETURN;</tag>
<tag> var t; </tag>
<one-of>
<item>
  <item repeat="0-1">
<one-of>
    <item>
      a
    </item>
    <item>
      an
    </item>
</one-of>
  </item>
  <item repeat="0-1">
<one-of>
    <item>
      can
      i
      have
      <item repeat="0-1">
        a
      </item>
    </item>
    <item>
      eyed
      like
      <item repeat="0-1">
        a
      </item>
    </item>
    <item>
      i
      would
      like
      <item repeat="0-1">
        a
      </item>
    </item>
    <item>
      give
      me
      <item repeat="0-1">
        a
      </item>
    </item>
    <item>
      gimme
      <item repeat="0-1">
        a
      </item>
    </item>
    <item>
      i
      want
      <item repeat="0-1">
        a
      </item>
    </item>
</one-of>
  </item>
<one-of>
  <item>
    <ruleref uri="#Toppings"/>
            <tag> out.nu_SLOTS.toppings = rules.Toppings.nu_RETURN; </tag>
  </item>
  <item>
    cheese
<tag>out.nu_SLOTS.toppings = &quot;plain&quot;;
</tag>
  </item>
  <item>
    plain
<tag>out.nu_SLOTS.toppings = &quot;plain&quot;;
</tag>
  </item>
  <item>
    <ruleref uri="#TheWorks"/>
        <tag>
    t = rules.TheWorks.nu_RETURN;
    out.nu_SLOTS.toppings = &quot;the_works&quot;;
    </tag>
  </item>
</one-of>
  <item repeat="0-1">
    pizza
  </item>
</item>
<item>
<one-of>
  <item>
    nothing
  </item>
  <item>
    none
  </item>
</one-of>
  <item repeat="0-1">
    thanks
  </item>
  <tag>
  out.nu_SLOTS.toppings = &quot;plain&quot;;
  </tag>
</item>
<item>
  no
  thanks
  <tag>
  out.nu_SLOTS.toppings = &quot;plain&quot;;
  </tag>
</item>
<item>
  <ruleref uri="#List"/>
  <tag>
  if (typeof(rules.List.nu_RETURN) != 'undefined') { nu_LATEST_RETURN = rules.List.nu_RETURN }
  out.nu_SLOTS.toppings = &quot;list&quot;;
  </tag>
</item>
<item>
  <ruleref uri="#Repeat"/>
  <tag>
  if (typeof(rules.Repeat.nu_RETURN) != 'undefined') { nu_LATEST_RETURN = rules.Repeat.nu_RETURN }
  out.nu_SLOTS.toppings = &quot;list&quot;;
  </tag>
</item>
</one-of>
<tag> assignSlots(out, rules) </tag>
</rule>

<rule id="TheWorks" scope="private">
<one-of>
<item>
  everything
</item>
<item>
  everything
  you
<one-of>
  <item>
    got
  </item>
  <item>
    have
  </item>
</one-of>
</item>
<item>
  the
  works
</item>
<item>
  <item repeat="0-1">
    a
  </item>
  combo
</item>
</one-of>
</rule>

<!--

;;.Kind 
;;(
;;    Size:s {&lt;size $s&gt;}
;;    [
;;        Toppings:t {&lt;toppings $t&gt;} 
;;        SpecialPizzaType:t {&lt;toppings $t&gt;}
;;    ] 
;;    ?pizza 
;;)
-->

<rule id="Size" scope="private">
<tag> var nu_LATEST_RETURN;</tag>
<one-of>
<item>
  <item repeat="0-1">
    a
  </item>
  personal
  <item repeat="0-1">
    pan
  </item>
  <tag>
  out.nu_RETURN = &quot;personal&quot;;
  </tag>
</item>
<item>
  <item repeat="0-1">
    a
  </item>
  small
  <tag>
  out.nu_RETURN = &quot;small&quot;;
  </tag>
</item>
<item>
  <item repeat="0-1">
    a
  </item>
  medium
  <tag>
  out.nu_RETURN = &quot;medium&quot;;
  </tag>
</item>
<item>
  <item repeat="0-1">
    a
  </item>
  large
  <tag>
  out.nu_RETURN = &quot;large&quot;;
  </tag>
</item>
<item>
  <item repeat="0-1">
    an
  </item>
  extra
  large
  <tag>
  out.nu_RETURN = &quot;extra_large&quot;;
  </tag>
</item>
<item>
<one-of>
  <item>
    six
  </item>
  <item>
    seven
  </item>
</one-of>
  inch
  <tag>
  out.nu_RETURN = &quot;personal&quot;;
  </tag>
</item>
<item>
<one-of>
  <item>
    eight
  </item>
  <item>
    nine
  </item>
  <item>
    ten
  </item>
  <item>
    eleven
  </item>
  <item>
    twelve
  </item>
</one-of>
  inch
  <tag>
  out.nu_RETURN = &quot;small&quot;;
  </tag>
</item>
<item>
<one-of>
  <item>
    thirteen
  </item>
  <item>
    fourteen
  </item>
  <item>
    fifteen
  </item>
</one-of>
  inch
  <tag>
  out.nu_RETURN = &quot;medium&quot;;
  </tag>
</item>
<item>
<one-of>
  <item>
    sixteen
  </item>
  <item>
    seventeen
  </item>
  <item>
    eighteen
  </item>
</one-of>
  inch
  <tag>
  out.nu_RETURN = &quot;large&quot;;
  </tag>
</item>
<item>
<one-of>
  <item>
    nineteen
  </item>
  <item>
    twenty
  </item>
  <item>
    twenty-one
  </item>
</one-of>
  inch
  <tag>
  out.nu_RETURN = &quot;extra_large&quot;;
  </tag>
</item>
<item>
  huge
  <tag>
  out.nu_RETURN = &quot;extra_large&quot;;
  </tag>
</item>
<item>
  big
  <tag>
  out.nu_RETURN = &quot;large&quot;;
  </tag>
</item>
<item>
  really
  big
  <tag>
  out.nu_RETURN = &quot;extra_large&quot;;
  </tag>
</item>
<item>
  enormous
  <tag>
  out.nu_RETURN = &quot;extra_large&quot;;
  </tag>
</item>
<item>
<one-of>
  <item>
    kindof
  </item>
  <item>
    kinda
  </item>
</one-of>
  big
  <tag>
  out.nu_RETURN = &quot;medium&quot;;
  </tag>
</item>
</one-of>
<item repeat="0-1">
  pizza
</item>
</rule>

<rule id="Pizza_Size" scope="public">
<tag> out.nu_SLOTS = {}; var nu_LATEST_RETURN;</tag>
<tag> var s; </tag>
<ruleref uri="#Size"/>
<tag> out.nu_SLOTS.size = rules.Size.nu_RETURN; </tag>
<tag> assignSlots(out, rules) </tag>
</rule>

<rule id="Toppings" scope="private">
<tag> out.nu_SLOTS = {}; var nu_LATEST_RETURN;</tag>
<tag> var t; var t1; var t2; var t3; </tag>
<one-of>
<item>
  <ruleref uri="#Topping"/>
      <tag> out.nu_RETURN = rules.Topping.nu_RETURN </tag>
</item>
<item>
  <ruleref uri="#Topping"/>
    <tag>
  t1 = rules.Topping.nu_RETURN;
  </tag>
  <item repeat="0-1">
    and
  </item>
  <ruleref uri="#Topping"/>
    <tag>
  t2 = rules.Topping.nu_RETURN;
  </tag>
  <tag>
  out.nu_RETURN = "" + (t1==undefined?"":t1) + &quot;|&quot; + (t2==undefined?"":t2);
  </tag>
</item>
<item>
  <ruleref uri="#Topping"/>
    <tag>
  t1 = rules.Topping.nu_RETURN;
  </tag>
  <item repeat="0-1">
    and
  </item>
  <ruleref uri="#Topping"/>
    <tag>
  t2 = rules.Topping.nu_RETURN;
  </tag>
  <item repeat="0-1">
    and
    <item repeat="0-1">
<one-of>
      <item>
        finally
      </item>
      <item>
        last
        but
        not
        least
      </item>
</one-of>
    </item>
  </item>
  <ruleref uri="#Topping"/>
    <tag>
  t3 = rules.Topping.nu_RETURN;
  </tag>
  <tag>
  out.nu_RETURN = "" + (t1==undefined?"":t1) + &quot;|&quot; + (t2==undefined?"":t2) + &quot;|&quot; + (t3==undefined?"":t3);
  </tag>
</item>
</one-of>
<tag> assignSlots(out, rules) </tag>
</rule>

<!--

;Toppings
;[
;    Topping:t {return (($t))}
;    (Topping:t ?and Toppings:ts) {return (insert-begin($ts $t))}
;]
-->

<rule id="Topping" scope="private">
<tag> var nu_LATEST_RETURN;</tag>
<one-of>
<item>
  anchovies
<tag>out.nu_RETURN = &quot;anchovies&quot;;
</tag>
</item>
<item>
  artichoke
  hearts
  <tag>
  out.nu_RETURN = &quot;artichoke_hearts&quot;;
  </tag>
</item>
<item>
  bacon
<tag>out.nu_RETURN = &quot;bacon&quot;;
</tag>
</item>
<item>
  canadian
  bacon
  <tag>
  out.nu_RETURN = &quot;canadian_bacon&quot;;
  </tag>
</item>
<item>
  chicken
<tag>out.nu_RETURN = &quot;chicken&quot;;
</tag>
</item>
<item>
  extra
  cheese
  <tag>
  out.nu_RETURN = &quot;extra_cheese&quot;;
  </tag>
</item>
<item>
  garlic
<tag>out.nu_RETURN = &quot;garlic&quot;;
</tag>
</item>
<item>
  green
  peppers
  <tag>
  out.nu_RETURN = &quot;green_peppers&quot;;
  </tag>
</item>
<item>
  peppers
<tag>out.nu_RETURN = &quot;green_peppers&quot;;
</tag>
</item>
<item>
  ground
  beef
  <tag>
  out.nu_RETURN = &quot;ground_beef&quot;;
  </tag>
</item>
<item>
  beef
<tag>out.nu_RETURN = &quot;ground_beef&quot;;
</tag>
</item>
<item>
  hamburger
<tag>out.nu_RETURN = &quot;ground_beef&quot;;
</tag>
</item>
<item>
<one-of>
  <item>
    jalapeno
  </item>
  <item>
    halapeenio
  </item>
</one-of>
  peppers
  <tag>
  out.nu_RETURN = &quot;jalapenos&quot;;
  </tag>
</item>
<item>
  jalapenos
<tag>out.nu_RETURN = &quot;jalapenos&quot;;
</tag>
</item>
<item>
  halapeenios
<tag>out.nu_RETURN = &quot;jalapenos&quot;;
</tag>
</item>
<item>
  lotsa
  garlic
  <tag>
  out.nu_RETURN = &quot;lotsa_garlic&quot;;
  </tag>
</item>
<item>
  linguica
<tag>out.nu_RETURN = &quot;linguica&quot;;
</tag>
</item>
<item>
  lingueesa
<tag>out.nu_RETURN = &quot;linguica&quot;;
</tag>
</item>
<item>
  mushrooms
<tag>out.nu_RETURN = &quot;mushrooms&quot;;
</tag>
</item>
<item>
  <item repeat="0-1">
    black
  </item>
  olives
  <tag>
  out.nu_RETURN = &quot;olives&quot;;
  </tag>
</item>
<item>
  onions
<tag>out.nu_RETURN = &quot;onions&quot;;
</tag>
</item>
<item>
  pastrami
<tag>out.nu_RETURN = &quot;pastrami&quot;;
</tag>
</item>
<item>
  pepperoni
<tag>out.nu_RETURN = &quot;pepperoni&quot;;
</tag>
</item>
<item>
  pineapple
<tag>out.nu_RETURN = &quot;pineapple&quot;;
</tag>
</item>
<item>
  red
  onions
  <tag>
  out.nu_RETURN = &quot;red_onions&quot;;
  </tag>
</item>
<item>
  salami
<tag>out.nu_RETURN = &quot;salami&quot;;
</tag>
</item>
<item>
  sausage
<tag>out.nu_RETURN = &quot;sausage&quot;;
</tag>
</item>
<item>
  shrimp
<tag>out.nu_RETURN = &quot;shrimp&quot;;
</tag>
</item>
<item>
  spinach
<tag>out.nu_RETURN = &quot;spinach&quot;;
</tag>
</item>
<item>
  tomatoes
<tag>out.nu_RETURN = &quot;tomatoes&quot;;
</tag>
</item>
<item>
  zucchini
<tag>out.nu_RETURN = &quot;zucchini&quot;;
</tag>
</item>
</one-of>
</rule>

<rule id="SpecialPizzaType" scope="private">
<one-of>
<item>
  <item repeat="0-1">
    king
    arthurs
  </item>
  supreme
</item>
<item>
  combo
</item>
<item>
  everything
</item>
<item>
  <item repeat="0-1">
    gourmet
  </item>
<one-of>
  <item>
    veggie
  </item>
  <item>
    vegetarian
  </item>
</one-of>
</item>
<item>
  chicken
  and
  garlic
  gourmet
</item>
<item>
  italian
  garlic
  supreme
</item>
<item>
  bacon
  super
  deli
</item>
<item>
  garden
  pesto
</item>
<item>
  western
  barbeque
  chicken
  supreme
</item>
<item>
  <item repeat="0-1">
    guineveres
  </item>
  garden
  <item repeat="0-1">
    delight
  </item>
</item>
<item>
  montagues
  all
  meat
  marvel
</item>
<item>
  hawaiian
</item>
</one-of>
</rule>

<rule id="Repeat" scope="private">
repeat
</rule>

<!--

;will flesh this out later
-->

<rule id="List" scope="private">
<one-of>
<item>
  <item repeat="0-1">
    tell
    me
  </item>
<one-of>
  <item>
    what
    are
  </item>
  <item>
    what&apos;re
  </item>
</one-of>
  <item repeat="0-1">
    all
    <item repeat="0-1">
      of
    </item>
  </item>
  the
  toppings
  <item repeat="0-1">
    please
  </item>
</item>
<item>
  please
  tell
  me
<one-of>
  <item>
    what
    are
  </item>
  <item>
    what&apos;re
  </item>
</one-of>
  <item repeat="0-1">
    all
    <item repeat="0-1">
      of
    </item>
  </item>
  the
  toppings
</item>
<item>
  <item repeat="0-1">
    tell
    me
    <item repeat="0-1">
      all
      <item repeat="0-1">
        of
      </item>
    </item>
    the
  </item>
  toppings
  <item repeat="0-1">
    please
  </item>
</item>
<item>
  <item repeat="0-1">
    please
  </item>
  tell
  me
  <item repeat="0-1">
    all
    <item repeat="0-1">
      of
    </item>
  </item>
  the
  toppings
</item>
<item>
  <item repeat="0-1">
<one-of>
    <item>
      can
    </item>
    <item>
      could
    </item>
    <item>
      would
    </item>
    <item>
      will
    </item>
</one-of>
    you
  </item>
  <item repeat="0-1">
    please
  </item>
  tell
  me
  what
  <item repeat="0-1">
    all
    <item repeat="0-1">
      of
    </item>
  </item>
  the
  toppings
  are
</item>
<item>
  <item repeat="0-1">
<one-of>
    <item>
      what
      are
    </item>
    <item>
      what&apos;re
    </item>
    <item>
      list
    </item>
</one-of>
  </item>
  <item repeat="0-1">
<one-of>
    <item>
      my
    </item>
    <item>
      the
    </item>
</one-of>
  </item>
<one-of>
  <item>
    choices
  </item>
  <item>
    options
  </item>
</one-of>
  <item repeat="0-1">
    please
  </item>
</item>
<item>
  whuddaya
<one-of>
  <item>
    got
  </item>
  <item>
    have
  </item>
</one-of>
</item>
<item>
  what
  have
  you
  got
</item>
<item>
<one-of>
  <item>
    whattuhv
  </item>
  <item>
    what&apos;ve
  </item>
</one-of>
  you
  got
</item>
<item>
  what
  do
  you
  have
</item>
</one-of>
</rule>

<!--

;this is for what the user would like to change
;;.WhatToChange WhatToChange:w {&lt;what_to_change $w&gt;}
-->

<rule id="WhatToChange" scope="private">
<tag> out.nu_SLOTS = {}; var nu_LATEST_RETURN;</tag>
<item repeat="0-1">
  <item repeat="0-1">
<one-of>
    <item>
      i
      would
      like
      to
    </item>
    <item>
      i&apos;d
      like
      to
    </item>
    <item>
      could
      i
    </item>
    <item>
      can
      i
    </item>
    <item>
      you
      should
    </item>
</one-of>
  </item>
  change
</item>
<item repeat="0-1">
<one-of>
  <item>
    my
  </item>
  <item>
    the
  </item>
</one-of>
</item>
<item repeat="0-1">
  pizza
</item>
<one-of>
<item>
  size
<tag>out.nu_RETURN = &quot;size&quot;;
</tag>
</item>
<item>
  how
  big
  <item repeat="0-1">
<one-of>
    <item>
<one-of>
      <item>
        my
      </item>
      <item>
        the
      </item>
</one-of>
      pizza
    </item>
    <item>
      it
    </item>
</one-of>
    is
  </item>
  <tag>
  out.nu_RETURN = &quot;size&quot;;
  </tag>
</item>
<item>
  toppings
<tag>out.nu_RETURN = &quot;toppings&quot;;
</tag>
</item>
<item>
  what&apos;s
  on
<one-of>
  <item>
    it
  </item>
  <item>
<one-of>
    <item>
      my
    </item>
    <item>
      the
    </item>
</one-of>
    pizza
  </item>
</one-of>
  <tag>
  out.nu_RETURN = &quot;toppings&quot;;
  </tag>
</item>
<item>
  both
<tag>out.nu_RETURN = &quot;both&quot;;
</tag>
</item>
<item>
  <item repeat="0-1">
    both
  </item>
  <item repeat="0-1">
    the
  </item>
  size
  and
  <item repeat="0-1">
    the
  </item>
  toppings
  <tag>
  out.nu_RETURN = &quot;both&quot;;
  </tag>
</item>
<item>
  <item repeat="0-1">
    both
  </item>
  what&apos;s
  on
  it
  and
  how
  big
  <item repeat="0-1">
<one-of>
    <item>
      it
    </item>
    <item>
      pizza
    </item>
</one-of>
    is
  </item>
  <tag>
  out.nu_RETURN = &quot;both&quot;;
  </tag>
</item>
<item>
  <ruleref uri="#CANCEL"/>
  <tag>
  if (typeof(rules.CANCEL.nu_RETURN) != 'undefined') { nu_LATEST_RETURN = rules.CANCEL.nu_RETURN }
  out.nu_RETURN = &quot;both&quot;;
  </tag>
</item>
<item>
  <ruleref uri="#Nothing"/>
  <tag>
  if (typeof(rules.Nothing.nu_RETURN) != 'undefined') { nu_LATEST_RETURN = rules.Nothing.nu_RETURN }
  out.nu_RETURN = &quot;nothing&quot;;
  </tag>
</item>
</one-of>
<item repeat="0-1">
  please
</item>
<tag> assignSlots(out, rules) </tag>
</rule>

<rule id="CANCEL" scope="private">
<one-of>
<item>
  cancel
</item>
<item>
  start
  <item repeat="0-1">
    all
  </item>
  over
</item>
</one-of>
</rule>

<rule id="Nothing" scope="private">
<one-of>
<item>
  nothing
</item>
<item>
  none
  of
  these
</item>
<item>
  none
  of
  the
  above
</item>
</one-of>
</rule>

<rule id="IWant" scope="private">
<tag> out.nu_SLOTS = {}; var nu_LATEST_RETURN;</tag>
<one-of>
<item>
  <ruleref uri="#IdLike"/>
  <tag>
  if (typeof(rules.IdLike.nu_RETURN) != 'undefined') { nu_LATEST_RETURN = rules.IdLike.nu_RETURN }
  </tag>
</item>
<item>
  <ruleref uri="#iWant"/>
  <tag>
  if (typeof(rules.iWant.nu_RETURN) != 'undefined') { nu_LATEST_RETURN = rules.iWant.nu_RETURN }
  </tag>
</item>
<item>
  <ruleref uri="#INeed"/>
  <tag>
  if (typeof(rules.INeed.nu_RETURN) != 'undefined') { nu_LATEST_RETURN = rules.INeed.nu_RETURN }
  </tag>
</item>
</one-of>
<tag> assignSlots(out, rules) </tag>
</rule>

<rule id="iWant" scope="private">
<one-of>
<item>
  i
  want
</item>
<item>
  i_want
</item>
</one-of>
</rule>

<rule id="IdLike" scope="private">
<one-of>
<item>
  i
  would
  like
</item>
<item>
  i_would_like
</item>
<item>
  i&apos;d
  like
</item>
</one-of>
</rule>

<rule id="INeed" scope="private">
<one-of>
<item>
  i
  need
</item>
<item>
  i_need
</item>
</one-of>
</rule>

<!--

;;.PhoneNumber PhoneNumber:p {&lt;phone_number $p&gt;}
;;PhoneNumber
;;[
;;    (?(area code) TEN_DIGITS:d10) {return($d10)}
;;    SEVEN_DIGITS:d7 {return($d7)}
;;]
;; Copyright (C) 1999-2000 Nuance Communications
;;
;; SOYesNo.grammar
;; Author: Jennifer Balogh
;; Last Modified: March 25, 1999
;; Two grammars are available in SOYesNo: YesNo and StrictYesNo 
;; YesNo handles loose expressions, for example, &quot;Yes, that&apos;s correct, thank you.&quot; 
;; StrictYesNo is limited to one-word responses.
-->

<rule id="YesNo" scope="private">
<tag> out.nu_SLOTS = {}; var nu_LATEST_RETURN;</tag>
<item repeat="0-1" repeat-prob="0.01">
  <ruleref uri="#YesNo_PreHesitation"/>
  <tag>
  if (typeof(rules.YesNo_PreHesitation.nu_RETURN) != 'undefined') { nu_LATEST_RETURN = rules.YesNo_PreHesitation.nu_RETURN }
  </tag>
</item>
<ruleref uri="#YesNo_CORE"/>
<tag>
if (typeof(rules.YesNo_CORE.nu_RETURN) != 'undefined') { nu_LATEST_RETURN = rules.YesNo_CORE.nu_RETURN }
</tag>
<tag> assignSlots(out, rules) </tag>
</rule>

<rule id="StrictYesNo" scope="private">
<tag> out.nu_SLOTS = {}; var nu_LATEST_RETURN;</tag>
<ruleref uri="#StrictYesNo_CORE"/>
<tag>
if (typeof(rules.StrictYesNo_CORE.nu_RETURN) != 'undefined') { nu_LATEST_RETURN = rules.StrictYesNo_CORE.nu_RETURN }
</tag>
<tag> assignSlots(out, rules) </tag>
</rule>

<!--

;; ......................................................................................
;; Fillers
-->

<rule id="YesNo_PreHesitation" scope="private">
<one-of>
<item>
  um
</item>
<item>
  uh
</item>
<item>
  hm
</item>
</one-of>
</rule>

<!--

;; ......................................................................................
;; Core grammars
-->

<rule id="YesNo_CORE" scope="private">
<tag> out.nu_SLOTS = {}; var nu_LATEST_RETURN;</tag>
<one-of>
<item>
  <ruleref uri="#YesLoose"/>
  <tag>
  if (typeof(rules.YesLoose.nu_RETURN) != 'undefined') { nu_LATEST_RETURN = rules.YesLoose.nu_RETURN }
  out.nu_SLOTS.SOYesNo = &quot;yes&quot;;
  </tag>
</item>
<item>
  <ruleref uri="#NoLoose"/>
  <tag>
  if (typeof(rules.NoLoose.nu_RETURN) != 'undefined') { nu_LATEST_RETURN = rules.NoLoose.nu_RETURN }
  out.nu_SLOTS.SOYesNo = &quot;no&quot;;
  </tag>
</item>
</one-of>
<tag> assignSlots(out, rules) </tag>
</rule>

<rule id="StrictYesNo_CORE" scope="private">
<tag> out.nu_SLOTS = {}; var nu_LATEST_RETURN;</tag>
<one-of>
<item>
  <ruleref uri="#YesStrict"/>
  <tag>
  if (typeof(rules.YesStrict.nu_RETURN) != 'undefined') { nu_LATEST_RETURN = rules.YesStrict.nu_RETURN }
  out.nu_SLOTS.SOYesNo = &quot;yes&quot;;
  </tag>
</item>
<item>
  <ruleref uri="#NoStrict"/>
  <tag>
  if (typeof(rules.NoStrict.nu_RETURN) != 'undefined') { nu_LATEST_RETURN = rules.NoStrict.nu_RETURN }
  out.nu_SLOTS.SOYesNo = &quot;no&quot;;
  </tag>
</item>
</one-of>
<tag> assignSlots(out, rules) </tag>
</rule>

<!--

;; Subgrammar used in YesNo
-->

<rule id="YesLoose" scope="private">
<one-of>
<item>
  yes
  please
</item>
<item>
<one-of>
  <item>
    yes
    <item repeat="0-1">
      it
      <item repeat="0-1">
<one-of>
        <item>
          sure
        </item>
        <item>
          certainly
        </item>
</one-of>
      </item>
      is
    </item>
  </item>
  <item>
    it
    <item repeat="0-1">
<one-of>
      <item>
        sure
      </item>
      <item>
        certainly
      </item>
</one-of>
    </item>
    is
  </item>
  <item>
    yup
  </item>
  <item>
    yeah
  </item>
  <item>
    okay
  </item>
  <item>
    sure
  </item>
  <item>
    you
    got
    it
  </item>
  <item>
    <item repeat="0-1">
      <item repeat="0-1">
        yes
      </item>
<one-of>
      <item>
        that&apos;s
      </item>
      <item>
        it&apos;s
      </item>
      <item>
        that
        is
      </item>
      <item>
        it
        is
      </item>
</one-of>
    </item>
<one-of>
    <item>
      right
    </item>
    <item>
      correct
    </item>
</one-of>
  </item>
  <item>
    <item repeat="0-1">
<one-of>
      <item>
        yes
      </item>
      <item>
        yeah
      </item>
</one-of>
    </item>
    i
<one-of>
    <item>
      would
    </item>
    <item>
      do
    </item>
</one-of>
  </item>
</one-of>
  <item repeat="0-1">
<one-of>
    <item>
      thanks
    </item>
    <item>
      thank
      you
    </item>
</one-of>
  </item>
</item>
</one-of>
</rule>

<!--

;; Subgrammar used in StrictYesNo
-->

<rule id="YesStrict" scope="private">
<one-of>
<item>
  yes
</item>
<item>
  yup
</item>
<item>
  yeah
</item>
<item>
  right
</item>
<item>
  correct
</item>
</one-of>
</rule>

<!--

;; Subgrammar used in YesNo
-->

<rule id="NoLoose" scope="private">
<one-of>
<item>
  nope
</item>
<item>
  absolutely
  not
</item>
<item>
  no
  <item repeat="0-1">
    way
  </item>
</item>
<item>
  <item repeat="0-1">
    no
  </item>
<one-of>
  <item>
    it
    isn&apos;t
  </item>
  <item>
    it&apos;s
    not
  </item>
  <item>
    it
    is
    not
  </item>
</one-of>
</item>
<item>
  <item repeat="0-1">
    <item repeat="0-1">
      no
    </item>
<one-of>
    <item>
      that&apos;s
    </item>
    <item>
      it&apos;s
    </item>
    <item>
      that
      is
    </item>
    <item>
      it
      is
    </item>
</one-of>
  </item>
<one-of>
  <item>
    wrong
  </item>
  <item>
    not
<one-of>
    <item>
      correct
    </item>
    <item>
      right
    </item>
</one-of>
  </item>
  <item>
    incorrect
  </item>
</one-of>
</item>
<item>
  <item repeat="0-1">
    no
  </item>
  i
<one-of>
  <item>
    would
    not
  </item>
  <item>
    wouldn&apos;t
  </item>
  <item>
    do
    not
  </item>
  <item>
    don&apos;t
  </item>
</one-of>
</item>
</one-of>
<item repeat="0-1">
<one-of>
  <item>
    thanks
  </item>
  <item>
    thank
    you
  </item>
</one-of>
</item>
</rule>

<!--

;; Subgrammar used in StrictYesNo
-->

<rule id="NoStrict" scope="private">
<one-of>
<item>
  no
</item>
<item>
  nope
</item>
<item>
  wrong
</item>
<item>
  incorrect
</item>
</one-of>
</rule>
</grammar>

