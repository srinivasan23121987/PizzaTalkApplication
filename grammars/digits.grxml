<?xml version="1.0" encoding="UTF-8"?>
<!-- This file automagically generated by convert_gsl version 2.4.0
 -->
<grammar version="1.0"
xml:lang="en-US"
mode="voice"
xmlns="http://www.w3.org/2001/06/grammar"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://www.w3.org/2001/06/grammar
http://www.w3.org/TR/speech-grammar/grammar.xsd"
root="DIGIT4"
tag-format="semantics/1.0">

<tag> function assignSlots(out, rules) {
        for (var nu_RULENAME in rules) {
          var nu_SLOTS = rules[nu_RULENAME].nu_SLOTS;
          for (var nu_PROPERTY in nu_SLOTS) { 
            out.nu_SLOTS[nu_PROPERTY] = nu_SLOTS[nu_PROPERTY];
          }
        }
      }
</tag>


<!--

;GSL2.0
-->

<rule id="DIGIT4" scope="public">
<tag> out.nu_SLOTS = {}; var nu_LATEST_RETURN;</tag>
<tag> var res; </tag>
<item repeat="0-1">
  <ruleref uri="#DIG_UH"/>
  <tag>
  if (typeof(rules.DIG_UH.nu_RETURN) != 'undefined') { nu_LATEST_RETURN = rules.DIG_UH.nu_RETURN }
  </tag>
</item>
<item repeat="0-1">
  <ruleref uri="#ITS_PIN"/>
  <tag>
  if (typeof(rules.ITS_PIN.nu_RETURN) != 'undefined') { nu_LATEST_RETURN = rules.ITS_PIN.nu_RETURN }
  </tag>
</item>
<ruleref uri="#DIGIT_STRING_4"/>
<tag>
res = rules.DIGIT_STRING_4.nu_RETURN;
</tag>
<tag>
out.nu_SLOTS.digits = res;
</tag>
<item repeat="0-1">
  please
</item>
<tag> assignSlots(out, rules) </tag>
</rule>

<rule id="DIGIT8" scope="public">
<tag> out.nu_SLOTS = {}; var nu_LATEST_RETURN;</tag>
<tag> var res; </tag>
<item repeat="0-1">
  <ruleref uri="#DIG_UH"/>
  <tag>
  if (typeof(rules.DIG_UH.nu_RETURN) != 'undefined') { nu_LATEST_RETURN = rules.DIG_UH.nu_RETURN }
  </tag>
</item>
<item repeat="0-1">
  <ruleref uri="#ITS_PID"/>
  <tag>
  if (typeof(rules.ITS_PID.nu_RETURN) != 'undefined') { nu_LATEST_RETURN = rules.ITS_PID.nu_RETURN }
  </tag>
</item>
<ruleref uri="#DIGIT_STRING_8"/>
<tag>
res = rules.DIGIT_STRING_8.nu_RETURN;
</tag>
<tag>
out.nu_SLOTS.digits = res;
</tag>
<item repeat="0-1">
  please
</item>
<tag> assignSlots(out, rules) </tag>
</rule>

<rule id="DIGIT9" scope="private">
<tag> out.nu_SLOTS = {}; var nu_LATEST_RETURN;</tag>
<tag> var res; </tag>
<item repeat="0-1">
  <ruleref uri="#DIG_UH"/>
  <tag>
  if (typeof(rules.DIG_UH.nu_RETURN) != 'undefined') { nu_LATEST_RETURN = rules.DIG_UH.nu_RETURN }
  </tag>
</item>
<item repeat="0-1">
  <ruleref uri="#ITS_SSN"/>
  <tag>
  if (typeof(rules.ITS_SSN.nu_RETURN) != 'undefined') { nu_LATEST_RETURN = rules.ITS_SSN.nu_RETURN }
  </tag>
</item>
<ruleref uri="#DIGIT_STRING_9"/>
<tag>
res = rules.DIGIT_STRING_9.nu_RETURN;
</tag>
<tag>
out.nu_SLOTS.digits = res;
</tag>
<item repeat="0-1">
  please
</item>
<tag> assignSlots(out, rules) </tag>
</rule>

<rule id="DIGIT10" scope="public">
<tag> out.nu_SLOTS = {}; var nu_LATEST_RETURN;</tag>
<tag> var res; </tag>
<item repeat="0-1">
  <ruleref uri="#DIG_UH"/>
  <tag>
  if (typeof(rules.DIG_UH.nu_RETURN) != 'undefined') { nu_LATEST_RETURN = rules.DIG_UH.nu_RETURN }
  </tag>
</item>
<ruleref uri="#DIGIT_STRING_10"/>
<tag>
res = rules.DIGIT_STRING_10.nu_RETURN;
</tag>
<tag>
out.nu_SLOTS.digits = res;
</tag>
<item repeat="0-1">
  please
</item>
<tag> assignSlots(out, rules) </tag>
</rule>

<rule id="DIGIT12" scope="public">
<tag> out.nu_SLOTS = {}; var nu_LATEST_RETURN;</tag>
<tag> var res; </tag>
<item repeat="0-1">
  <ruleref uri="#DIG_UH"/>
  <tag>
  if (typeof(rules.DIG_UH.nu_RETURN) != 'undefined') { nu_LATEST_RETURN = rules.DIG_UH.nu_RETURN }
  </tag>
</item>
<item repeat="0-1">
  <ruleref uri="#ITS_CLAIM"/>
  <tag>
  if (typeof(rules.ITS_CLAIM.nu_RETURN) != 'undefined') { nu_LATEST_RETURN = rules.ITS_CLAIM.nu_RETURN }
  </tag>
</item>
<ruleref uri="#DIGIT_STRING_12"/>
<tag>
res = rules.DIGIT_STRING_12.nu_RETURN;
</tag>
<tag>
out.nu_SLOTS.digits = res;
</tag>
<item repeat="0-1">
  please
</item>
<tag> assignSlots(out, rules) </tag>
</rule>

<rule id="DIGIT_STRING_4" scope="private">
<tag> out.nu_SLOTS = {}; var nu_LATEST_RETURN;</tag>
<tag> var d1; var d2; var d3; var d4; </tag>
<ruleref uri="#SUB_DIGIT"/>
<tag>
d1 = rules.SUB_DIGIT.nu_RETURN;
</tag>
<ruleref uri="#SUB_DIGIT"/>
<tag>
d2 = rules.SUB_DIGIT.nu_RETURN;
</tag>
<ruleref uri="#SUB_DIGIT"/>
<tag>
d3 = rules.SUB_DIGIT.nu_RETURN;
</tag>
<ruleref uri="#SUB_DIGIT"/>
<tag>
d4 = rules.SUB_DIGIT.nu_RETURN;
</tag>
<tag>
out.nu_RETURN = "" + (d1==undefined?"":d1) + (d2==undefined?"":d2) + (d3==undefined?"":d3) + (d4==undefined?"":d4);
</tag>
<tag> assignSlots(out, rules) </tag>
</rule>

<rule id="DIGIT_STRING_8" scope="private">
<tag> out.nu_SLOTS = {}; var nu_LATEST_RETURN;</tag>
<tag> var d1; var d2; var d3; var d4; var d5; var d6; var d7; var d8; </tag>
<ruleref uri="#SUB_DIGIT"/>
<tag>
d1 = rules.SUB_DIGIT.nu_RETURN;
</tag>
<ruleref uri="#SUB_DIGIT"/>
<tag>
d2 = rules.SUB_DIGIT.nu_RETURN;
</tag>
<ruleref uri="#SUB_DIGIT"/>
<tag>
d3 = rules.SUB_DIGIT.nu_RETURN;
</tag>
<ruleref uri="#SUB_DIGIT"/>
<tag>
d4 = rules.SUB_DIGIT.nu_RETURN;
</tag>
<ruleref uri="#SUB_DIGIT"/>
<tag>
d5 = rules.SUB_DIGIT.nu_RETURN;
</tag>
<ruleref uri="#SUB_DIGIT"/>
<tag>
d6 = rules.SUB_DIGIT.nu_RETURN;
</tag>
<ruleref uri="#SUB_DIGIT"/>
<tag>
d7 = rules.SUB_DIGIT.nu_RETURN;
</tag>
<ruleref uri="#SUB_DIGIT"/>
<tag>
d8 = rules.SUB_DIGIT.nu_RETURN;
</tag>
<tag>
out.nu_RETURN = "" + (d1==undefined?"":d1) + (d2==undefined?"":d2) + (d3==undefined?"":d3) + (d4==undefined?"":d4) + (d5==undefined?"":d5) + (d6==undefined?"":d6) + (d7==undefined?"":d7) + (d8==undefined?"":d8);
</tag>
<tag> assignSlots(out, rules) </tag>
</rule>

<rule id="DIGIT_STRING_9" scope="private">
<tag> out.nu_SLOTS = {}; var nu_LATEST_RETURN;</tag>
<tag> var d1; var d2; var d3; var d4; var d5; var d6; var d7; var d8; var d9; </tag>
<ruleref uri="#SUB_DIGIT"/>
<tag>
d1 = rules.SUB_DIGIT.nu_RETURN;
</tag>
<ruleref uri="#SUB_DIGIT"/>
<tag>
d2 = rules.SUB_DIGIT.nu_RETURN;
</tag>
<ruleref uri="#SUB_DIGIT"/>
<tag>
d3 = rules.SUB_DIGIT.nu_RETURN;
</tag>
<ruleref uri="#SUB_DIGIT"/>
<tag>
d4 = rules.SUB_DIGIT.nu_RETURN;
</tag>
<ruleref uri="#SUB_DIGIT"/>
<tag>
d5 = rules.SUB_DIGIT.nu_RETURN;
</tag>
<ruleref uri="#SUB_DIGIT"/>
<tag>
d6 = rules.SUB_DIGIT.nu_RETURN;
</tag>
<ruleref uri="#SUB_DIGIT"/>
<tag>
d7 = rules.SUB_DIGIT.nu_RETURN;
</tag>
<ruleref uri="#SUB_DIGIT"/>
<tag>
d8 = rules.SUB_DIGIT.nu_RETURN;
</tag>
<ruleref uri="#SUB_DIGIT"/>
<tag>
d9 = rules.SUB_DIGIT.nu_RETURN;
</tag>
<tag>
out.nu_RETURN = "" + (d1==undefined?"":d1) + (d2==undefined?"":d2) + (d3==undefined?"":d3) + (d4==undefined?"":d4) + (d5==undefined?"":d5) + (d6==undefined?"":d6) + (d7==undefined?"":d7) + (d8==undefined?"":d8) + (d9==undefined?"":d9);
</tag>
<tag> assignSlots(out, rules) </tag>
</rule>

<rule id="DIGIT_STRING_10" scope="private">
<tag> out.nu_SLOTS = {}; var nu_LATEST_RETURN;</tag>
<tag> var d1; var d10; var d2; var d3; var d4; var d5; var d6; var d7; var d8; var d9; </tag>
<ruleref uri="#SUB_DIGIT"/>
<tag>
d1 = rules.SUB_DIGIT.nu_RETURN;
</tag>
<ruleref uri="#SUB_DIGIT"/>
<tag>
d2 = rules.SUB_DIGIT.nu_RETURN;
</tag>
<ruleref uri="#SUB_DIGIT"/>
<tag>
d3 = rules.SUB_DIGIT.nu_RETURN;
</tag>
<ruleref uri="#SUB_DIGIT"/>
<tag>
d4 = rules.SUB_DIGIT.nu_RETURN;
</tag>
<ruleref uri="#SUB_DIGIT"/>
<tag>
d5 = rules.SUB_DIGIT.nu_RETURN;
</tag>
<ruleref uri="#SUB_DIGIT"/>
<tag>
d6 = rules.SUB_DIGIT.nu_RETURN;
</tag>
<ruleref uri="#SUB_DIGIT"/>
<tag>
d7 = rules.SUB_DIGIT.nu_RETURN;
</tag>
<ruleref uri="#SUB_DIGIT"/>
<tag>
d8 = rules.SUB_DIGIT.nu_RETURN;
</tag>
<ruleref uri="#SUB_DIGIT"/>
<tag>
d9 = rules.SUB_DIGIT.nu_RETURN;
</tag>
<ruleref uri="#SUB_DIGIT"/>
<tag>
d10 = rules.SUB_DIGIT.nu_RETURN;
</tag>
<tag>
out.nu_RETURN = "" + (d1==undefined?"":d1) + (d2==undefined?"":d2) + (d3==undefined?"":d3) + (d4==undefined?"":d4) + (d5==undefined?"":d5) + (d6==undefined?"":d6) + (d7==undefined?"":d7) + (d8==undefined?"":d8) + (d9==undefined?"":d9) + (d10==undefined?"":d10);
</tag>
<tag> assignSlots(out, rules) </tag>
</rule>

<rule id="DIGIT_STRING_12" scope="private">
<tag> out.nu_SLOTS = {}; var nu_LATEST_RETURN;</tag>
<tag> var d1; var d10; var d11; var d12; var d2; var d3; var d4; var d5; var d6; var d7; var d8; var d9; </tag>
<ruleref uri="#SUB_DIGIT"/>
<tag>
d1 = rules.SUB_DIGIT.nu_RETURN;
</tag>
<ruleref uri="#SUB_DIGIT"/>
<tag>
d2 = rules.SUB_DIGIT.nu_RETURN;
</tag>
<ruleref uri="#SUB_DIGIT"/>
<tag>
d3 = rules.SUB_DIGIT.nu_RETURN;
</tag>
<ruleref uri="#SUB_DIGIT"/>
<tag>
d4 = rules.SUB_DIGIT.nu_RETURN;
</tag>
<ruleref uri="#SUB_DIGIT"/>
<tag>
d5 = rules.SUB_DIGIT.nu_RETURN;
</tag>
<ruleref uri="#SUB_DIGIT"/>
<tag>
d6 = rules.SUB_DIGIT.nu_RETURN;
</tag>
<ruleref uri="#SUB_DIGIT"/>
<tag>
d7 = rules.SUB_DIGIT.nu_RETURN;
</tag>
<ruleref uri="#SUB_DIGIT"/>
<tag>
d8 = rules.SUB_DIGIT.nu_RETURN;
</tag>
<ruleref uri="#SUB_DIGIT"/>
<tag>
d9 = rules.SUB_DIGIT.nu_RETURN;
</tag>
<ruleref uri="#SUB_DIGIT"/>
<tag>
d10 = rules.SUB_DIGIT.nu_RETURN;
</tag>
<ruleref uri="#SUB_DIGIT"/>
<tag>
d11 = rules.SUB_DIGIT.nu_RETURN;
</tag>
<ruleref uri="#SUB_DIGIT"/>
<tag>
d12 = rules.SUB_DIGIT.nu_RETURN;
</tag>
<tag>
out.nu_RETURN = "" + (d1==undefined?"":d1) + (d2==undefined?"":d2) + (d3==undefined?"":d3) + (d4==undefined?"":d4) + (d5==undefined?"":d5) + (d6==undefined?"":d6) + (d7==undefined?"":d7) + (d8==undefined?"":d8) + (d9==undefined?"":d9) + (d10==undefined?"":d10) + (d11==undefined?"":d11) + (d12==undefined?"":d12);
</tag>
<tag> assignSlots(out, rules) </tag>
</rule>

<rule id="SUB_DIGIT_ZERO_THRU_NINE" scope="private">
<tag> var nu_LATEST_RETURN;</tag>
<one-of>
<item>
  zero
<tag>out.nu_RETURN = &quot;0&quot;;
</tag>
</item>
<item>
  oh
<tag>out.nu_RETURN = &quot;0&quot;;
</tag>
</item>
<item>
  one
<tag>out.nu_RETURN = &quot;1&quot;;
</tag>
</item>
<item>
  two
<tag>out.nu_RETURN = &quot;2&quot;;
</tag>
</item>
<item>
  three
<tag>out.nu_RETURN = &quot;3&quot;;
</tag>
</item>
<item>
  four
<tag>out.nu_RETURN = &quot;4&quot;;
</tag>
</item>
<item>
  five
<tag>out.nu_RETURN = &quot;5&quot;;
</tag>
</item>
<item>
  six
<tag>out.nu_RETURN = &quot;6&quot;;
</tag>
</item>
<item>
  seven
<tag>out.nu_RETURN = &quot;7&quot;;
</tag>
</item>
<item>
  eight
<tag>out.nu_RETURN = &quot;8&quot;;
</tag>
</item>
<item>
  nine
<tag>out.nu_RETURN = &quot;9&quot;;
</tag>
</item>
</one-of>
</rule>

<rule id="SUB_DIGIT" scope="private">
<tag> out.nu_SLOTS = {}; var nu_LATEST_RETURN;</tag>
<tag> var n; </tag>
<ruleref uri="#SUB_DIGIT_ZERO_THRU_NINE"/>
<tag> out.nu_RETURN = rules.SUB_DIGIT_ZERO_THRU_NINE.nu_RETURN </tag>
<tag> assignSlots(out, rules) </tag>
</rule>

<rule id="ITS_PID" scope="private">
<one-of>
<item>
  it
  is
</item>
<item>
  it&apos;s
</item>
<item>
<one-of>
  <item>
    my
  </item>
  <item>
    the
  </item>
</one-of>
  <item repeat="0-1">
    provider
  </item>
  <item repeat="0-1">
    id
  </item>
  number
  is
</item>
</one-of>
</rule>

<rule id="ITS_SSN" scope="private">
<one-of>
<item>
  it
  is
</item>
<item>
  it&apos;s
</item>
<item>
<one-of>
  <item>
    my
  </item>
  <item>
    the
  </item>
</one-of>
  <item repeat="0-1">
    social
    security
  </item>
  number
  is
</item>
</one-of>
</rule>

<rule id="ITS_PIN" scope="private">
<one-of>
<item>
  it
  is
</item>
<item>
  it&apos;s
</item>
<item>
<one-of>
  <item>
    my
  </item>
  <item>
    the
  </item>
</one-of>
  <item repeat="0-1">
    pin
  </item>
  number
  is
</item>
</one-of>
</rule>

<rule id="ITS_CLAIM" scope="private">
<one-of>
<item>
  it
  is
</item>
<item>
  it&apos;s
</item>
<item>
<one-of>
  <item>
    my
  </item>
  <item>
    the
  </item>
</one-of>
  <item repeat="0-1">
    claim
  </item>
  number
  is
</item>
</one-of>
</rule>

<rule id="DIG_UH" scope="private">
<one-of>
<item>
  um
</item>
<item>
  uh
</item>
<item>
  oh
</item>
</one-of>
</rule>
</grammar>

