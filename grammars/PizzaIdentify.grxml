<?xml version="1.0" encoding="UTF-8"?>
<!-- This file automagically generated by convert_gsl version 2.4.0
 -->
<grammar version="1.0"
xml:lang="en-US"
mode="voice"
xmlns="http://www.w3.org/2001/06/grammar"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://www.w3.org/2001/06/grammar
http://www.w3.org/TR/speech-grammar/grammar.xsd"
root="PIZZA_IDENTIFY"
tag-format="semantics/1.0">

<tag> function assignSlots(out, rules) {
        for (var nu_RULENAME in rules) {
          var nu_SLOTS = rules[nu_RULENAME].nu_SLOTS;
          for (var nu_PROPERTY in nu_SLOTS) { 
            out.nu_SLOTS[nu_PROPERTY] = nu_SLOTS[nu_PROPERTY];
          }
        }
      }
</tag>


<!--

;GSL2.0
-->

<rule id="PIZZA_PLEASE_CHANGE" scope="private">
<item repeat="0-1">
  please
</item>
<one-of>
<item>
  <item repeat="0-1">
    i
    <item repeat="0-1">
      really
    </item>
<one-of>
    <item>
      want
    </item>
    <item>
      would
      like
    </item>
</one-of>
    to
  </item>
</item>
<item>
  <item repeat="0-1">
    i&apos;d
    <item repeat="0-1">
      really
    </item>
    like
    to
  </item>
</item>
</one-of>
<one-of>
<item>
  change
</item>
<item>
  correct
</item>
<item>
  fix
</item>
</one-of>
</rule>

<rule id="PIZZA_ITS" scope="private">
<one-of>
<item>
  it&apos;s
</item>
<item>
  it
  is
</item>
</one-of>
</rule>

<rule id="PIZZA_ALL" scope="private">
<one-of>
<item>
  all
</item>
<item>
  totally
</item>
<item>
  completely
</item>
<item>
  entirely
</item>
</one-of>
</rule>

<rule id="PIZZA_WRONG" scope="private">
<one-of>
<item>
  wrong
</item>
<item>
  incorrect
</item>
</one-of>
</rule>

<rule id="PIZZA_IS_WRONG" scope="private">
is
<one-of>
<item>
  wrong
</item>
<item>
  incorrect
</item>
<item>
  not
  right
</item>
<item>
  not
  correct
</item>
</one-of>
</rule>

<rule id="PIZZA_ARE_WRONG" scope="private">
are
<one-of>
<item>
  wrong
</item>
<item>
  incorrect
</item>
<item>
  not
  right
</item>
<item>
  not
  correct
</item>
</one-of>
</rule>

<rule id="PIZZA_THE_SIZE" scope="private">
<item repeat="0-1">
  the
</item>
size
</rule>

<rule id="PIZZA_THE_TOPPINGS" scope="private">
<item repeat="0-1">
  the
</item>
toppings
</rule>

<rule id="PIZZA_IDENTIFY_SINGLE_CORE" scope="private">
<tag> out.nu_SLOTS = {}; var nu_LATEST_RETURN;</tag>
<one-of>
<item>
  <ruleref uri="#PIZZA_THE_SIZE"/>
  <tag>
  if (typeof(rules.PIZZA_THE_SIZE.nu_RETURN) != 'undefined') { nu_LATEST_RETURN = rules.PIZZA_THE_SIZE.nu_RETURN }
  out.nu_SLOTS.command = &quot;size&quot;;
  </tag>
</item>
<item>
  <ruleref uri="#PIZZA_THE_TOPPINGS"/>
  <tag>
  if (typeof(rules.PIZZA_THE_TOPPINGS.nu_RETURN) != 'undefined') { nu_LATEST_RETURN = rules.PIZZA_THE_TOPPINGS.nu_RETURN }
  out.nu_SLOTS.command = &quot;toppings&quot;;
  </tag>
</item>
</one-of>
<tag> assignSlots(out, rules) </tag>
</rule>

<rule id="PIZZA_IDENTIFY_DOUBLE_CORE" scope="private">
<tag> out.nu_SLOTS = {}; var nu_LATEST_RETURN;</tag>
<one-of>
<item>
  both
</item>
<item>
  <item repeat="0-1">
    both
  </item>
  <ruleref uri="#PIZZA_THE_SIZE"/>
  <tag>
  if (typeof(rules.PIZZA_THE_SIZE.nu_RETURN) != 'undefined') { nu_LATEST_RETURN = rules.PIZZA_THE_SIZE.nu_RETURN }
  </tag>
  <item repeat="0-1">
    and
  </item>
  <ruleref uri="#PIZZA_THE_TOPPINGS"/>
  <tag>
  if (typeof(rules.PIZZA_THE_TOPPINGS.nu_RETURN) != 'undefined') { nu_LATEST_RETURN = rules.PIZZA_THE_TOPPINGS.nu_RETURN }
  </tag>
</item>
<item>
  <item repeat="0-1">
    both
  </item>
  <ruleref uri="#PIZZA_THE_TOPPINGS"/>
  <tag>
  if (typeof(rules.PIZZA_THE_TOPPINGS.nu_RETURN) != 'undefined') { nu_LATEST_RETURN = rules.PIZZA_THE_TOPPINGS.nu_RETURN }
  </tag>
  <item repeat="0-1">
    and
  </item>
  <ruleref uri="#PIZZA_THE_SIZE"/>
  <tag>
  if (typeof(rules.PIZZA_THE_SIZE.nu_RETURN) != 'undefined') { nu_LATEST_RETURN = rules.PIZZA_THE_SIZE.nu_RETURN }
  </tag>
</item>
</one-of>
<tag>
out.nu_SLOTS.command = &quot;both&quot;;
</tag>
<tag> assignSlots(out, rules) </tag>
</rule>

<rule id="PIZZA_IDENTIFY_EVERYTHING_CORE" scope="private">
<tag> out.nu_SLOTS = {}; var nu_LATEST_RETURN;</tag>
<one-of>
<item>
  <item repeat="0-1" repeat-prob="0.01">
    <ruleref uri="#PIZZA_PLEASE_CHANGE"/>
    <tag>
    if (typeof(rules.PIZZA_PLEASE_CHANGE.nu_RETURN) != 'undefined') { nu_LATEST_RETURN = rules.PIZZA_PLEASE_CHANGE.nu_RETURN }
    </tag>
  </item>
<one-of>
  <item>
    all
    of
<one-of>
    <item>
      them
    </item>
    <item>
      these
    </item>
</one-of>
  </item>
  <item>
    all
    of
    it
  </item>
  <item>
    everything
  </item>
  <item>
    <item repeat="0-1">
      the
    </item>
    whole
    thing
  </item>
</one-of>
</item>
<item>
  <ruleref uri="#PIZZA_ITS"/>
  <tag>
  if (typeof(rules.PIZZA_ITS.nu_RETURN) != 'undefined') { nu_LATEST_RETURN = rules.PIZZA_ITS.nu_RETURN }
  </tag>
  <ruleref uri="#PIZZA_ALL"/>
  <tag>
  if (typeof(rules.PIZZA_ALL.nu_RETURN) != 'undefined') { nu_LATEST_RETURN = rules.PIZZA_ALL.nu_RETURN }
  </tag>
  <ruleref uri="#PIZZA_WRONG"/>
  <tag>
  if (typeof(rules.PIZZA_WRONG.nu_RETURN) != 'undefined') { nu_LATEST_RETURN = rules.PIZZA_WRONG.nu_RETURN }
  </tag>
</item>
<item>
  they&apos;re
  <ruleref uri="#PIZZA_ALL"/>
  <tag>
  if (typeof(rules.PIZZA_ALL.nu_RETURN) != 'undefined') { nu_LATEST_RETURN = rules.PIZZA_ALL.nu_RETURN }
  </tag>
  <ruleref uri="#PIZZA_WRONG"/>
  <tag>
  if (typeof(rules.PIZZA_WRONG.nu_RETURN) != 'undefined') { nu_LATEST_RETURN = rules.PIZZA_WRONG.nu_RETURN }
  </tag>
</item>
<item>
  all
  of
<one-of>
  <item>
    them
  </item>
  <item>
    these
  </item>
</one-of>
  <ruleref uri="#PIZZA_ARE_WRONG"/>
  <tag>
  if (typeof(rules.PIZZA_ARE_WRONG.nu_RETURN) != 'undefined') { nu_LATEST_RETURN = rules.PIZZA_ARE_WRONG.nu_RETURN }
  </tag>
</item>
<item>
<one-of>
  <item>
    all
    of
    it
  </item>
  <item>
    everything
  </item>
  <item>
    <item repeat="0-1">
      the
    </item>
    whole
    thing
  </item>
</one-of>
  <ruleref uri="#PIZZA_IS_WRONG"/>
  <tag>
  if (typeof(rules.PIZZA_IS_WRONG.nu_RETURN) != 'undefined') { nu_LATEST_RETURN = rules.PIZZA_IS_WRONG.nu_RETURN }
  </tag>
</item>
</one-of>
<tag>
out.nu_SLOTS.command = &quot;both&quot;;
</tag>
<tag> assignSlots(out, rules) </tag>
</rule>

<rule id="PIZZA_IDENTIFY_NOTHING_CORE" scope="private">
<tag> out.nu_SLOTS = {}; var nu_LATEST_RETURN;</tag>
<one-of>
<item>
  none
  <item repeat="0-1">
    of
<one-of>
    <item>
      them
    </item>
    <item>
      these
    </item>
</one-of>
  </item>
  <item repeat="0-1" repeat-prob="0.01">
    <ruleref uri="#PIZZA_ARE_WRONG"/>
    <tag>
    if (typeof(rules.PIZZA_ARE_WRONG.nu_RETURN) != 'undefined') { nu_LATEST_RETURN = rules.PIZZA_ARE_WRONG.nu_RETURN }
    </tag>
  </item>
</item>
<item>
  nothing
  <item repeat="0-1" repeat-prob="0.01">
    <ruleref uri="#PIZZA_IS_WRONG"/>
    <tag>
    if (typeof(rules.PIZZA_IS_WRONG.nu_RETURN) != 'undefined') { nu_LATEST_RETURN = rules.PIZZA_IS_WRONG.nu_RETURN }
    </tag>
  </item>
</item>
<item>
  there&apos;s
  nothing
  wrong
</item>
<item>
  <item repeat="0-1">
    <item repeat="0-1">
      i
    </item>
    don&apos;t
    <item repeat="0-1">
<one-of>
      <item>
        want
      </item>
      <item>
        need
      </item>
</one-of>
      to
    </item>
  </item>
  change
<one-of>
  <item>
    nothing
  </item>
  <item>
    anything
  </item>
  <item>
    any
    of
<one-of>
    <item>
      them
    </item>
    <item>
      these
    </item>
</one-of>
  </item>
</one-of>
</item>
</one-of>
<tag>
out.nu_SLOTS.command = &quot;none&quot;;
</tag>
<tag> assignSlots(out, rules) </tag>
</rule>

<rule id="PIZZA_IDENTIFY" scope="public">
<tag> out.nu_SLOTS = {}; var nu_LATEST_RETURN;</tag>
<item repeat="0-1" repeat-prob="0.01">
  <ruleref uri="#PIZZA_PreHesitation"/>
  <tag>
  if (typeof(rules.PIZZA_PreHesitation.nu_RETURN) != 'undefined') { nu_LATEST_RETURN = rules.PIZZA_PreHesitation.nu_RETURN }
  </tag>
</item>
<item repeat="0-1" repeat-prob="0.0001">
  <ruleref uri="#PIZZA_PreFiller"/>
  <tag>
  if (typeof(rules.PIZZA_PreFiller.nu_RETURN) != 'undefined') { nu_LATEST_RETURN = rules.PIZZA_PreFiller.nu_RETURN }
  </tag>
</item>
<one-of>
<item>
  <item repeat="0-1" repeat-prob="0.01">
    <ruleref uri="#PIZZA_PLEASE_CHANGE"/>
    <tag>
    if (typeof(rules.PIZZA_PLEASE_CHANGE.nu_RETURN) != 'undefined') { nu_LATEST_RETURN = rules.PIZZA_PLEASE_CHANGE.nu_RETURN }
    </tag>
  </item>
  <ruleref uri="#PIZZA_IDENTIFY_SINGLE_CORE"/>
  <tag>
  if (typeof(rules.PIZZA_IDENTIFY_SINGLE_CORE.nu_RETURN) != 'undefined') { nu_LATEST_RETURN = rules.PIZZA_IDENTIFY_SINGLE_CORE.nu_RETURN }
  </tag>
</item>
<item>
  <ruleref uri="#PIZZA_IDENTIFY_SINGLE_CORE"/>
  <tag>
  if (typeof(rules.PIZZA_IDENTIFY_SINGLE_CORE.nu_RETURN) != 'undefined') { nu_LATEST_RETURN = rules.PIZZA_IDENTIFY_SINGLE_CORE.nu_RETURN }
  </tag>
  <ruleref uri="#PIZZA_IS_WRONG"/>
  <tag>
  if (typeof(rules.PIZZA_IS_WRONG.nu_RETURN) != 'undefined') { nu_LATEST_RETURN = rules.PIZZA_IS_WRONG.nu_RETURN }
  </tag>
</item>
<item>
  <item repeat="0-1" repeat-prob="0.01">
    <ruleref uri="#PIZZA_PLEASE_CHANGE"/>
    <tag>
    if (typeof(rules.PIZZA_PLEASE_CHANGE.nu_RETURN) != 'undefined') { nu_LATEST_RETURN = rules.PIZZA_PLEASE_CHANGE.nu_RETURN }
    </tag>
  </item>
  <ruleref uri="#PIZZA_IDENTIFY_DOUBLE_CORE"/>
  <tag>
  if (typeof(rules.PIZZA_IDENTIFY_DOUBLE_CORE.nu_RETURN) != 'undefined') { nu_LATEST_RETURN = rules.PIZZA_IDENTIFY_DOUBLE_CORE.nu_RETURN }
  </tag>
</item>
<item>
  <ruleref uri="#PIZZA_IDENTIFY_DOUBLE_CORE"/>
  <tag>
  if (typeof(rules.PIZZA_IDENTIFY_DOUBLE_CORE.nu_RETURN) != 'undefined') { nu_LATEST_RETURN = rules.PIZZA_IDENTIFY_DOUBLE_CORE.nu_RETURN }
  </tag>
  <ruleref uri="#PIZZA_ARE_WRONG"/>
  <tag>
  if (typeof(rules.PIZZA_ARE_WRONG.nu_RETURN) != 'undefined') { nu_LATEST_RETURN = rules.PIZZA_ARE_WRONG.nu_RETURN }
  </tag>
</item>
<item>
  <ruleref uri="#PIZZA_IDENTIFY_EVERYTHING_CORE"/>
  <tag>
  if (typeof(rules.PIZZA_IDENTIFY_EVERYTHING_CORE.nu_RETURN) != 'undefined') { nu_LATEST_RETURN = rules.PIZZA_IDENTIFY_EVERYTHING_CORE.nu_RETURN }
  </tag>
</item>
<item>
  <ruleref uri="#PIZZA_IDENTIFY_NOTHING_CORE"/>
  <tag>
  if (typeof(rules.PIZZA_IDENTIFY_NOTHING_CORE.nu_RETURN) != 'undefined') { nu_LATEST_RETURN = rules.PIZZA_IDENTIFY_NOTHING_CORE.nu_RETURN }
  </tag>
</item>
</one-of>
<item repeat="0-1" repeat-prob="0.0001">
  <ruleref uri="#PIZZA_PostFiller"/>
  <tag>
  if (typeof(rules.PIZZA_PostFiller.nu_RETURN) != 'undefined') { nu_LATEST_RETURN = rules.PIZZA_PostFiller.nu_RETURN }
  </tag>
</item>
<tag> assignSlots(out, rules) </tag>
</rule>

<!--

;; Allow ums and uhs as prefixes.
-->

<rule id="PIZZA_PreHesitation" scope="private">
<one-of>
<item>
  uh
</item>
<item>
  hm
</item>
<item>
  um
</item>
</one-of>
</rule>

<!--

;; Endings
-->

<rule id="PIZZA_PostFiller" scope="private">
<one-of>
<item>
  please
</item>
<item>
  thanks
</item>
<item>
  thank
  you
</item>
</one-of>
</rule>

<!--

;;
;; Prefillers:
;;
-->

<rule id="PIZZA_PreFiller" scope="private">
<one-of>
<item>
  i
<one-of>
  <item>
    guess
  </item>
  <item>
    suppose
  </item>
</one-of>
</item>
<item>
  let
  me
  see
</item>
</one-of>
</rule>
</grammar>

